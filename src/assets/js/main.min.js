(function () {

    'use strict';

    angular.module('market', [    
        'ngRoute',                                
        'ui.router',
        'ngDialog',
        'LocalStorageModule'      
    ]);
    
})();
(function () {

    'use strict';

    angular.module('market')
        .controller('marketController', marketController);

        marketController.$inject = ['DataFactory'];

        function marketController(DataFactory) {
            let vm = this;
            vm.data = DataFactory;
            vm.data.carrinho = [];   
            vm.data.livros = [];     
        }

})();

(function () {

    'use strict';

    angular
        .module('market')
        .config(ConfigProvider)
        .config(ConfigLocalStorage)
        .run(function () {    
        });

    ConfigProvider.$inject = ['$urlRouterProvider', '$stateProvider'];

    function ConfigProvider($urlRouterProvider, $stateProvider) {
        $urlRouterProvider.otherwise('/');

        $stateProvider
            .state('/', {
                url: '/',
                views: {
                    'header': {
                        template: '<mkt-header></mkt-header>'
                    },
                    'body': {
                        template: '<home></home>'
                    },                    
                    'footer': {
                        template: '<mkt-footer></mkt-footer>'
                    }
                }
            })
            .state('carrinho', {
                url: '/carrinho',
                views: {
                'header': {
                        template: '<mkt-header></mkt-header>'
                    },
                    'body': {
                        template: '<carrinho></carrinho>'
                    },                    
                    'footer': {
                        template: '<mkt-footer></mkt-footer>'
                    }  
                }              
            })
            .state('error-page', {
                url: '/error-page',
                views: {
                'header': {
                        template: '<mkt-header></mkt-header>'
                    },
                    'body': {
                        template: '<mkt-error></mkt-error>'
                    },                    
                    'footer': {
                        template: '<mkt-footer></mkt-footer>'
                    }  
                }              
            });            
    }

    ConfigLocalStorage.$inject = ['localStorageServiceProvider'];

    function ConfigLocalStorage(localStorageServiceProvider) {
        localStorageServiceProvider.setPrefix('market');
    }

})();
(function () {

    'use strict';

    angular.module('market')        
        .controller('carrinhoController', carrinhoController)
        .component('carrinho', {
            templateUrl: '../components/carrinho/carrinho.html',
            controller: 'carrinhoController',
            controllerAs: 'vm'
        });

        carrinhoController.$inject = ['DataFactory', 'ngDialog', 'carrinhoService', 'localStorageService', '$state'];

        function carrinhoController(DataFactory, ngDialog, carrinhoService, localStorageService, $state) {
            let vm = this;  
            vm.data = DataFactory;
            vm.subtotal = 0;

            let calculaSubTotal = () => {
                vm.subtotal = vm.data.carrinho.reduce((tot, livro) => {
                    return tot + (livro.qtde * livro.preco);
                }, 0);
            }

            let getLocalStorage = () => {
                if (vm.data.carrinho.length == 0) {
                    let carrinho = localStorageService.get('carrinho');
                    if (carrinho) {
                        vm.data.carrinho = carrinho;
                    }
                }

                if(vm.data.livros.length == 0) {
                    let livros = localStorageService.get('livros');
                    if(livros) {
                        vm.data.livros = livros;
                    }
                }
            }

            let init = () => {
                getLocalStorage();
                calculaSubTotal();                
            }

            init();

            let salvarLocalStorage = () => {
                localStorageService.set('livros', vm.data.livros);
                localStorageService.set('carrinho', vm.data.carrinho);
            }           

            vm.aumentarQtde = (param) => {
                let count = 0;
                //Procura o livro no estoque
                let livroEstoque = vm.data.livros.find(livro => { count++; return livro.id == param.id} );
                //Se o estoque for maior que 0,
                //Remove 1, e adiciona 1 no carrinho
                if(livroEstoque.qtde > 0) {                    
                    livroEstoque.qtde --;
                    vm.data.livros.splice(count-1, 1, livroEstoque);
                    param.qtde ++;                    
                    calculaSubTotal();
                    salvarLocalStorage();
                }                                
            }

            vm.diminuirQtde = (param) => {
                if (param.qtde > 1) {
                    let count = 0;
                    //Procura o livro no estoque
                    let livroEstoque = vm.data.livros.find(livro => { count++; return livro.id == param.id} );
                    //Acrescenta 1 no estoque e remove 1 no carrinho
                    livroEstoque.qtde ++;                    
                    vm.data.livros.splice(count-1, 1, livroEstoque);
                    param.qtde --;
                    calculaSubTotal(); 
                    salvarLocalStorage();                   
                }                
            }

            vm.removerItem = (param ,index) => {
                let count = 0;
                //Procura o livro no estoque
                let livroEstoque = vm.data.livros.find(livro => { count++; return livro.id == param.id} );
                //Adiciona a quantidade total de volta para o estoque;
                livroEstoque.qtde += param.qtde;
                vm.data.livros.splice(count-1, 1, livroEstoque);
                //remove o item do carrinho;
                vm.data.carrinho.splice(index, 1);
                calculaSubTotal();
                salvarLocalStorage();
            }

            vm.aplicarCupom = () => {
                carrinhoService.getCupom(vm.cupom).then(data => {
                    if (data) {
                        vm.itensDesconto = 0;
                        vm.desconto = 0;
                        data.autores.forEach(autor => {
                            vm.desconto = vm.data.carrinho.reduce((tot, livro) => {
                                if (livro.autor === autor) {
                                    vm.itensDesconto++;
                                    return tot + ((livro.preco * livro.qtde)*data.desconto)/100;
                                }
                            },0)
                        });                        
                    } else {                        
                        ngDialog.open({
                            template: '<div> Cupom inválido. </div>',
                            plain: true,
                            className: 'ngdialog-theme-default',
                            closeByDocument: true,
                            closeByEscape: true,
                            showClose: false
                        });  
                        //Remover o focus do botão, pois ao aparecer o ngDialog
                        //O enter continua funcionando e isso pode causar muitos bugs.
                        document.getElementById('btn-aplicar-cupom').blur();
                        document.getElementById('input-aplicar-cupom').blur(); 
                    }
                });                
                vm.cupom = '';
            }

            vm.finalizarCompra = () => {
                ngDialog.open({
                    template: '<div>Compra finalizada com sucesso ! <br/> Obrigado por navegar no mktBook. </div>',
                    plain: true,
                    className: 'ngdialog-theme-default',
                    closeByDocument: true,
                    closeByEscape: true,
                    showClose: false
                });
                localStorageService.remove('livros');
                localStorageService.remove('carrinho');
                vm.data.carrinho = [];
                vm.data.livros = [];
                $state.go('/');
            }
            
        }
    
})();
(function () {

    'use strict';

    angular.module('market')        
        .service('carrinhoService', carrinhoService)        

        carrinhoService.$inject = ['HTTPSERVICE', 'CONST', '$q'];

        function carrinhoService( HTTPSERVICE, CONST, $q) {
            let vm = this;             
            
            vm.getCupom = (cupom) => {
                let defer = $q.defer();

                HTTPSERVICE.get(CONST.getCupom + `?cupom=${cupom}`).then(data => {                    
                    defer.resolve(data);
                }).catch(err => { 
                    defer.reject(err)
                });

                return defer.promise;
            }
        }
    
})();
(function () {

    'use strict';

    angular.module('market')        
        .controller('homeController', homeController)
        .component('home', {
            templateUrl: '../components/home/home.html',
            controller: 'homeController',
            controllerAs: 'vm'
        });

        homeController.$inject = ['homeService', '$q', '$state', 'DataFactory', 'ngDialog', 'localStorageService'];

        function homeController(homeService, $q, $state, DataFactory, ngDialog, localStorageService) {
            let vm = this;
            vm.data = DataFactory;            
            vm.carregando = true;            
           
            let init = () => {
                //Ao recarregar a pagina verifica se existe livros no carrinho
                //e se existe livros já carregados;
                if (vm.data.livros.length == 0) {
                    let livros = localStorageService.get('livros');                                                                    
                    let carrinho = localStorageService.get('carrinho');

                    if (carrinho) {
                        vm.data.carrinho = carrinho;
                    }
                    if (!livros) {
                        getLivros().then(livros => {
                            vm.data.livros = livros;
                        }).catch(err => {
                            $state.go('error-page');
                        })
                    } else {
                        vm.data.livros = livros;
                    }
                    vm.carregando = false;
                } else {                  
                    vm.carregando = false;  
                }
            }

            init();

            let salvarLocalStorage = () => {
                //Salva em cache os dados para não perder.
                localStorageService.set('livros', vm.data.livros);
                localStorageService.set('carrinho', vm.data.carrinho);
            }

            function getLivros() {
                let defer = $q.defer();
                
                homeService.getLivros().then(livros => {
                    defer.resolve(livros);
                }).catch(err => {
                    defer.reject(err);
                })

                return defer.promise;
            }          

            vm.adicionarCarrinho = (param, index) => {
                let count = 0;
                //Copia o objeto Livro
                let livroTemp = angular.copy(param);                
                //Seta a qtde 1, pois ao clicar no carrinho sempre adicionar 1;
                livroTemp.qtde = 1;                
                
                //Procura o produto no estoque;
                let livroEstoque = vm.data.livros.find( livro => { count++; return livro.id == param.id });

                if (livroEstoque.qtde > 0) {
                    livroEstoque.qtde--;

                    vm.data.livros.splice(count-1, 1, livroEstoque);

                    //Procura no carrinho se já existe um produto igual
                    let livroCarrinho = vm.data.carrinho.find(livro => {
                        return livro.id == livroTemp.id;
                    });

                    //Se existir soma +1 a qtde e recoloca no array.
                    //Se não adiciona o novo objeto ao array.
                    if (livroCarrinho) {
                        livroCarrinho.qtde ++;
                        vm.data.carrinho.splice(index,1,livroCarrinho);
                    } else {
                        vm.data.carrinho.push(livroTemp);
                    }
                    salvarLocalStorage();
                } else {                   
                    ngDialog.open({
                        template: '<div> Produto fora de estoque. </div>',
                        plain: true,
                        className: 'ngdialog-theme-default',
                        closeByDocument: true,
                        closeByEscape: true,
                        showClose: false
                    })
                    //Remover o focus do botão, pois ao aparecer o ngDialog
                    //O enter continua funcionando e isso pode causar muitos bugs.
                    document.getElementById('btn-adicionar-carrinho-' + index).blur();
                }               
            }
        }

})();
(function () {

    'use strict';

    angular.module('market')        
        .service('homeService', homeService)        

        homeService.$inject = ['HTTPSERVICE', 'CONST', '$q'];

        function homeService( HTTPSERVICE, CONST, $q) {
            let vm = this;             
            
            vm.getLivros = () => {
                let defer = $q.defer();

                HTTPSERVICE.get(CONST.getLivros).then(data => {                    
                    defer.resolve(data);
                }).catch(err => { 
                    defer.reject(err)
                });

                return defer.promise;
            }
        }
    
})();

(function () {

    'use strict';
    angular.module('market')
        .controller('errorController', errorController)
        .component('mktError', {
                templateUrl: '../components/partials/error/error.html',
                controller: 'errorController',
                controllerAs: 'vm'
            });

        errorController.$inject = [];

        function errorController() {

        }

})();

(function () {

    'use strict';
    angular.module('market')
        .controller('footerController', footerController)
        .component('mktFooter', {
                templateUrl: '../components/partials/footer/footer.html',
                controller: 'footerController',
                controllerAs: 'vm'
            });

        footerController.$inject = [];

        function footerController() {

        }

})();
(function () {

    'use strict';

    angular.module('market')
        .controller('headerController', headerController)
        .component('mktHeader', {
                templateUrl: '../components/partials/header/header.html',
                controller: 'headerController',
                controllerAs: 'vm'
            });

        headerController.$inject = ['$state', 'DataFactory', 'ngDialog'];

        function headerController($state, DataFactory, ngDialog) {
            let vm = this;
            vm.data = DataFactory; 
                                        
            vm.goCarrinho = () => {            
                $state.go('carrinho');
                console.log('carrinho');           
            }

            vm.goInicio = () => {            
                $state.go('/');            
            }              

        }
    
})();

(function () {

    'use strict';

    const staticRoot = 'http://127.0.0.1:3131/api/';
    angular.module('market')
        .constant('CONST', {
            
            getLivros: staticRoot,            
            getCupom: staticRoot.concat('getCupom')

        })
    
})();
(function () {

    'use strict';

    angular
        .module('market')
        .factory('DataFactory', DataFactory);

    DataFactory.$inject = [];

    function DataFactory() {

        var data = {};

        return data;

    }

})();

(function () {

    'use strict';
    angular.module('market')
        .service('HTTPSERVICE', HTTPSERVICE);

        HTTPSERVICE.$inject = ['$http', '$q'];

        function HTTPSERVICE($http, $q) {        
            let vm = this;        

            vm.get = (url) => {
                var defer = $q.defer();

                $http.get(url).then(function(data) {
                    defer.resolve(data.data);
                }, function(err) {
                    defer.reject(err);
                })

                return defer.promise;
            }

            vm.post = (url, params) => {
                var defer = $q.defer();
                $http.post(url, params).then(function(data) {
                    defer.resolve(data.data);
                }, function(err) {
                    defer.reject(err);
                });
                return defer.promise;
            }

            vm.delete = (url) => {
                var defer = $q.defer();
                $http.delete(url).then(function(data) {
                    defer.resolve(data);
                }, function(err) {
                    defer.reject(err);
                });
                return defer.promise;
            }
        }

})();
(function () {

    'use strict';

    angular.module('market')
        .directive('ngEnter', function() {
            return function(scope, element, attrs) {
                element.bind("keydown keypress", function(event) {
                    if(event.which === 13) {
                        scope.$apply(function(){
                            scope.$eval(attrs.ngEnter, {'event': event});
                        });
                        event.preventDefault();
                    }
                });
            };
        });

})();